JAVASCRIPT KURSU
1.GUN
Console.log("Hello World") -> console kısmında cıktı almamıza saglar.Kelimeler arası virgul kullana
biliyoruz.
/* Ornek yorum satırı */ -> yorum satırına almak için kullanılır.Tek satırlık yorumlar -> //
Console.log içerisinde matematik işlemlerini yapabiliyoruz.
Numbers->integers(-3,-1,1,2) / float numbers(-3.5,-2.25,0.0,1.1)
String -> 'asab','hello world'
Booleans -> true,false
Veri tipi kontrolü -> console.log(typeof true)
Tanımlama yaparken var,let yada const keywordlerini kullanıyoruz.const sabittir degişmez.mesela pi
sayısı degişemediğinden kullanabiliriz.Var cok kullanılmıyor daha çok let kullanacagız.Let degişebi
lir sayılarda kullanıcaz.

2.GUN
İlkel olmayan veri türlerini karsılastırdıgımzda içerisi ve dataları aynı da olsa false sonucu verir
Math objesini kullanarak çeşitli işlemleri yapabiliyoruz.Örnegin ;
console.log(Math.max(1,2,5,7,8,2)) -> max rakam olan 8 i bize sonuc olarak döndürüyor.
let randomNumber = Math.floor(Math.random() * 11) -> bize 0 ile 10 arasında rastgele bir sayı
döndürüyor her seferinde.
elimizde uzun bir yazı varsa ve sonraki cümlenin aşagı satırda başlamasını istiyorsak biten cümle
nin sonuna \ koyarız.Örnek verirsek : let paragrapf = "merhaba bu uzun bir yazı o yüzden bir kısmı\
asagıda devam etmeli."
`` -> bu iki çentik arasında degerleri farklı şekilde kullanabiliyoruz ve oldukca pratik.incelemek
gerekirse -> let fullName = `${a} + ${b} = ${a+b}`

3.GUN
== ile === arasındaki fark == -> degerlerinin eşit olup olmadıgını kontrol eder. 
=== -> tamamen denk olup olmadıgına bakarız.hem degeri hem de veri türü aynı olmalıdır.
Kosul ifadesi -> KOSUL ? TRUE(true olması halinde olacak) : FALSE(false olması halinde olacak)
windows methodları =>
alert('text') -> ekrana uyarı kutusu ve butonu cıkartır.
prompt() -> input girilebilecek bir metin kutusu cıkartır ekrana.
confirm() -> dogrulama isteyen bir kutu yollar kullanıcı ekranına
Date Object => 

4.GUN
Koşullar => 
if,elseif,switch,ternary vs
switch case yapısı -> 
switch(value){
  case 5 :
  console.log("Sayi 5 dir")
  break
  case 8 :
  console.log("Sayi 8 dir")
  break
  default :
  console.log("Sayi bunların hiçbiri degil")
}
ternary yapısı ->
KOSUL ? TRUE : FALSE şeklinde kullanıyoruz.

5.GUN
DIZILER =>
sayılar = [1,2,"Enis"] veya sayılar2 = Array(3).fill(5) => fill arrayin içine koyacagımız sayıyı
eklememizi saglar.
concat => iki diziyi birleştirmemizi saglar. sayılar.concat(sayilar2) gibi
includes -> dizide belirtilen eleman varsa true döner.sayilar.includes(1)
push -> dizinin sonuna belirtilen elemanı ekler. sayılar.push(3)
pop -> dizinin son elemanını siler. sayılar.pop()
shift -> dizinin en başındaki elemanı siler. sayılar.shift()
unshift -> dizinin en başına eleman eklememizi saglar. sayılar.unshift(4)
Dizilerde sıralama => 
dizi.sort -> küçükten büyüğe sıralar ve a dan z ye sıralar
dizi.reverse -> tam tersi büyükten küçüğe veya z dan aya sıralar

6.GUN
DONGULER =>
*for döngüsü => for(let i=0; i<=5; i++){
console.log(i) gibi
}
*while döngüsü => while(i<=5){
console.log(i)
i++ gibi
}
*do while => while dan tek farkı kosul saglansa da saglanmasa da bir kere çalışır.
*for(sayi of sayilar){
code
} => foreach yapısı bir nevi
*break komutu => döngüden cıkmak istendiğinde kullanabiliyoruz.

7.GUN
FONKSIYONLAR =>
Kodları temiz ve kolay,yeniden kullanılabilir ve test etmesi kolay hale getiririz fonksiyonlar saye
sinde.
Fonksiyon tanımlama -> function functionName(){
Code....
}
call vs invoke => 
function test(){} adında bir fonksiyonumuz var.Sadece cagırcaksak su sekilde => test()
invoke etmek istersek => function invoker(func){
func()
}
invoker(test) => bu şekilde de dolaylı yoldan calıstırmıs oluyoruz.

JS 8.GUN KAPSAM VE NESNELER

Kapsam(SCOPE) => 
1.Window Scope => var,let ve const ile tanımlamayıp düz şekilde tanımlarsan bu sınıfa girer ve her pencereden erişilebilir hale gelir.

2.Global Scope => Fonksiyonun dışında iken bütün sayfada geçerlidir.Fonksiyon içinde ise sadece fonksiyon içini kapsar.

3.Local Scope  => Belli bir kapsam cercevesinde eriştiğimiz değişkenleri kapsar.

Object => Bir nesne oluşturmak için -> const person = {};
Nesneyi değerlerle oluşturmak -> const person = {
firstName : 'Enis',
surName : 'Tüfekci',
age : 25,
skills : ['HTML','CSS','JS','C#'],
isMarried : false
} 
Nesnedeki değerlere erişmek -> Mesela person.FirstName;
Nesneler değiştirilebilir,içeriği silinebilir veya içine veri eklenebilir.

JS 9.GUN HIGH ORDER FUNCTION

Higher Order Function => parametre olarak fonksiyon alıyolar veya geriye fonksiyon döndürüyolar.

CallBack => Parametre olarak geçen fonksiyonlardır. let sum=0; arr.forEach(function(element){sum+=element}) gibi

SettingTime => js de bazı işlemleri hangi aralıkta calısacagını ayarlayabiliyoruz.
a->SetInterval => Belli zaman aralıklarında işlemi devam ettirebilmek için bunu kullanıyoruz.İki parametre alıyor.İlki callback ikincisi duration(mili saniye türünden)
function sayHello(){
console.log('Hello')
}
setInterval(sayHello,1000); -> Her 1 saniyede bir sayHello fonksiyonunu cagırır.
b->SetTimeOut => Gelecekte bir kod blogunu calıstırmakta kullanıyoruz.
function sayHello(){
console.log('Hello')
}
setInterval(sayHello,1000);  -> 1 saniye sonra sayHello fonksiyonu cagrılır ve bir daha cagırılmaz.
Bu işlemleri iptal etmek için de önlerine clear getiriyoruz.Mesela;
const interval = setInterval(sayHello,1000);
setTimeOut(() =>{
clearInterval(interval)
console.log('İnterval işlemi iptal edildi.')
},5000)

Functional Programming => normal döngüler yazmak yerine çeşitli yerleşik methodlar kullanıyoruz.
1-foreach => her bir dizi elemanını tekrarlamak için kullanıyoruz.const numbers= [1,2,3,4,5]; numbers.forEach(num => console.log(num));
2-map => foreache cok benzer. let users =[
{
id:1,
name:"enis",		=>   users = users.map(user =>{if(user.id ===2){user.name = 'Aybuke'}return user})
age:25
},
{
id:2,
name:"naim",
age:34
}
]

3-filter => belli kriterlere göre filtrelememizi sağlar. => numbers.filter(number=>number>3)
4-reduce => numbers.reduce((oldValue,currentValue) => {return oldValue + currentValue},0)
5-every => her bir elemanın bizim kosulumuzu karsılayıp karsılamadıgına bakar. => users.every(user => user.gender ===1)
6-some => Everyden tek farkı elemanlardan biri kosulu saglıyorsa true döner.
7-find => koşula ilk uyan elemanı bize döndürür. numbers.find(number => number >2)
8-findIndex => Kosula ilk uyan elemanın indexini bize döndürür.
9-sort => büyükten küçüğe veya küçükten büyüğe sıralamamıza olanak saglıyor. names.sort , numaralar.sort((a,b) => a-b) => int larda sıralama yaparken bunu yapmamız gerekiyor.

JS 10.GUN  SET/MAP =>
SET => Set ve Map aslında Array ve Objecte benziyorlar.Setin arrayden farkı sette her bir eleman unique olmalı.Mapin arrayden farkı ise mapde keyleri her türlü veriden oluş
turabiliriz.Set sadece benzersiz elemanları içerebilir.const companies = new Set();
companies.add('Google'); seklinde eklenebiliyor. companies.delete('Google') ile eleman siliniyor.companies.clear() ile içini temizliyoruz.
const numbers = [5,3,2,5,6,1,3] , const setOfNumbers = new Set(numbers); => tekrar eden ifadenin tekrar edenini getirmiyor sadece benzersiz şekilde geliyor.{5,3,2,6,1} gibi
MAP => map.set() eleman eklemek için kullanıyoruz.map.set('1','s'),map.set(1,'ahmet') gibi 
map.get('1') ile istediğimiz elemana ait degeri getirir.
map.size() ile uzunlugunu buluyoruz.

JS 11.GUN DESTRUCTİNG / SPREAD / REST
Destructuring => Dizilerin ve objeleri bazı elemanlarını cıkartıp kullanmamıza olanak saglar.
const numbers = [10,12,14]; ilk elemanını almak istediğimizde numbers[0] ı kullanıyoruz normalde.
const [] = numbers -> const[number1,number2] = numbers dediğimizde number1 -> 10 number2 -> 12 oluyor.
Spread => const nums = [1,2,3,4,5,6] , let [num1,num2,num3,..._nums] = nums; bu operatörle ilk 3 sayıyı atadıktan sonra 
kalan sayıları bir _nums dizisinin içine doldurur. ..._nums baştaki 3 nokta rest operatorüdür. Genel kullanılan method ise
Spread operatörü kapsamındadır. 

JS 12.GUN REGULAR EXPRESSIONS
Arama deseni,metin arama ve metin değiştirme işlemler için kullanılabilir.
1-) i => normalde text.search() yaparken baş harfi büyük küçük uyumlu olmazsa arama yaparken bulamıyor
ve -1 değeri dönüyor.Bunun çözümü olarak =>
text.search(/javascript/) yerine (/javascript/i) kullanarak bu sorunu çözüyoruz.
2-) g=> belirtilen metnin tamamında arama yapılacagını belirtir.
3-) m => birden fazla satırdan olusan metinlerde arama yapmak için kullanılır.
4-)test => bir dizide eşleşme olup olmadıgını kontrol eder. text2.test(text1) true veya false döner
5-) match => tüm eşleşmeleri içeren bir dizi döndürür.
6--)search => bir dizide eşleşme olup olmadıgını kpntrol eder ve eşleşme yoksa -1 döner varsa eşleş
me dizinini döner.
7-) replace => bir dizede eşleşme araması yürütür ve eşleşen elemanı istenen elemanla değiştirir.
text1.replace(/pyton,'javascript') gibi
[ac] => a veya b veya c demek. [az] => a dan z ye herhangi bir harf demek. \D => dizenin rakam içer
mediği eşleşme.
Regular Expressionda kaçış karakteri \ dir. mesela /\d/g gibi











































